@startuml
skinparam classAttributeIconSize 0
enum Category {
   Mathematics
    Computer Science
    Physics
    Biology
    Chemistry
    Engineering
    Artificial Intelligence
    Machine Learning
    Cybersecurity
    Data Science
    Economics
    Philosophy
    Linguistics
    Psychology
    History
    Literature
    Political Science
    Sociology
    Environmental Science
    Education
}
enum EventType {
    Conference
    Workshop
    Seminar
    Hackaton
    Networking Event
    Career Fair
    Lectures
}



class Main_Controller{

- loggedUser : User
- instance : Main_Controller
- preferences : List<Category>
+ getinstance()  : Main_Controller
 +editEventPage(eid : int, newContent : Content) : void
 +customizeEventPage(organizerId: int, eid : int, details :String) :boolean
 +register(email :String, name :String, password :String ) : boolean
 +requestEvents()
 +registerEvent(eid : String, attendee: User) : boolean
 +requestPreferences()
 +addPreferences(pref : Category) : boolean
 +createEvent(name:String, startDate:Date, endDate:Date, startTime: Time, endTime:Time)
 +finishEvent(eid:String)
 +uploadPromotionalContent(eid : Int, content : File) : boolean
 -requestFeedback() : void
 +completeReview()
 +joinChatroom(eid : Int, user : User) : boolean
 +chat(eid : Int, user : User, message : String) : boolean
 +browseEvent(filteringDetails)
 +sendNewsletter()
}
class PaymentController{
    +processPayment(attendee: User, eid: Int) : boolean
    +refundPayment(attendee: User, eid: Int) : boolean
    +requestPaymentInfo(attendee: User, eid: Int) : boolean
   -sendPaymentToGateway(payment : Payment): boolean
}
class Payment{
    - pid :  int
    - amount : Double
    - date : Date
    - attendee : User
    - event : Event
}


class Promotional_Content{
    - file_path : String
    - updloaded_at : Date
}
class FileManager{
    +processFile(eid: int,file:File):boolean
    +storeFile(eid:int,file: File): boolean
    -validateFile(file: File): boolean
}
class DatabaseController{
    +requestEventPageInformation(eid:Int)
    +addNewEvent(e:Event)
    +storeFile(file: File): boolean
}

class Event_Content{
    - posts : Map<Date, String>
}
class Event_Agenda{
    - timeSlots: Map<Time, String> |
}
class Filtering_Controller{
    - instance : Filtering_Controller
    + getinstance()  :  Filtering_Controller
    +getEvents(filteringDetails) : List<Event>
    +findSingleEvent(eid: int) : Event
}

interface EventFilter{
    +buildFilter() : List<Event>
}
class BaseFilter{
    -tableName: String
    -today: Date
    +buildFilter() : List<Event>  
}

class EventFilterDecorator{
    -filter : EventFilter
    +buildFilter() : List<Event>
}
class Keyword_EventFilterDecorator{
      +buildFilter() : List<Event>
}
class Category_EventFilterDecorator{
      +buildFilter() : List<Event>
     }
class EventType_EventFilterDecorator{
      +buildFilter() : List<Event>
    }
class Date_EventFilterDecorator{
      +buildFilter() : List<Event>
    }


class User_Catalog{
    - user_catalog :  User_Catalog
    +addPreferences(attendee : User, pref : Category) : boolean
    +getSubscribed() : List<User>
    +getInstance() :  User_Catalog
    +register(user_name : String , password : String, gender : Enum , email: String, email_subscribed: boolean) : boolean
  	+login(user_name : String , password : String) : User
  	+getCurrentUser(uid : Int) : User
  	+getAllUser() : User
  	+logout() : boolean
    +getInstance() : User_Catalog
  	+getUserEvents(uid : Int) : List<Event> 
    + setPreferences(Categories[4])

}
class User {
    {static} user_TDG : User_TDG
     - uid : Int
    - FavoriteCategories: Category[4]
    - user_name : String
    - password : String
    - gender: Enum 
    - email : String
    - email_subscribed  : Boolean
    +getAllPreferences() : List<Category>
    +displayPreferences() : String
    +addPreferences(pref : Category) : boolean
    +getCategories() : List<Category>
    +register(user_name, email, user_password, gender):boolean
 	+login(email, user_password) : boolean
 	+get_user_name() : String
  	+get_email() : String
 	+get_password() : String

}
class User_TDG{
     + getLatest(): int
 	 +getUserByUid(uid) : JSON
 	 +getUserByEmail(email): JSON
 	 +createUser(user_name, email, user_password): boolean
	 +updateUser(uid, user_name, email, user_password): boolean
	 +deleteUserByEmail(email): JSON
	 +deleteUserByUid(uid): boolean
	 +loginUser(email, user_password): boolean

}

class Email_Campaigner{
    +getInstance() : Email_Campaigner
    +createNewsletter(subscribed: User, categories : Category[4], event_Description: String[4]) : User_newsletter
    +sendNewsletter(newsletter : User_newsletter) : boolean
}


class User_newsletter{
    - user : User
    - categories : Category[4]
    - event_Description: String[4]

}
class Participan_Feedback{

}
class Feedback_Form{

}


class Event_Catalog {
- instance : Event_Catalog
+ getinstance()  : Event_Catalog
- findEvent(eid : Int) : Event
+requestEvents() : List<Event>
+add(attendee: User, eid : Int) : boolean
+createEvent(name:String, startDate:Date, endDate:Date, startTime: Time, endTime:Time) : Event
+addEvent(event : Event) : boolean
+createReport(eid : Int) : void
+downloadPromotionalContent(eid :Int): boolean
+registrerToEvent(eid:Int, user:User) : boolean
+removeParticipant(eid:Int, user:User) : boolean
+joinChatroom(eid : Int, user : User) : boolean
+isParticipant(eid : Int, user : User) : boolean
+filterEvents(eventDetails) : List<Event>
}

class Event {
{static} eventT_TDG : Event_TDG
- eid : int
- title : String
- description  : String 
- date : Date
- location : String
- category : Category
- type :EventType
- organizer: String
+setPageContent(newContent : String) : void
+updatePage(description:String) : boolean
+addContent(newcontent :String) : void
+toString() : String
+createReport() : boolean
+addReport(report :Report) : boolean
+viewEventPromotional() : boolean
+downloadPromotionalContent() : boolean
+joinChatroom(user : User) : boolean 
+getCategory() : Category
}

class Event_TDG{
    + getLatest(): int
     + addEvent(event: Event): void
     + getEvents() : List<Event>

}
class Event_Factory{
     + createEvent(...): boolean
}

class Attendee_Catalog{
    +addAttendee(attendee: User, event: Event ) : boolean
  	+getAttendees(eid : Int): List<User>

}
class Handler {
    + nextHandler : Handler
    + handle(user: User, eid: Int) : void
}
class EmailTicketHandler {
    -user: User
  	-eid: String
    + handle(user: User, eid: Int) : void
}
class RegistrationHandler {
    -user: User
  	-eid: String
    + handle(user: User, eid: Int) : void
}

class Event_Attendee{
    - attendee: User
    - event :  Event
}
class Event_Attendee_TDG{
    +addAttendee(uid, eid): JSON
 	+getAllEvent(uid) :  JSON

}



class Event_Detail{
    - sponsorInfo: String
    - speakerInf :  String
}


class Engagement_Manager {
+fillReview()
+chat(participant : User, message : String) : boolean
}

class Chatroom{
+sendMessage(participant : User, message : String) : boolean
}

class Report{

}
class Review_Form{

}
class Review_Answer{

}
class Review_Catalog{

}
class Mailgun_Service{
    -mailgun: MailgunClient
  	-client: MailgunClient

}

'Promotion
Main_Controller  -->"1"User_Catalog
Main_Controller  -->"1"Event_Catalog
Main_Controller  -->"1"Email_Campaigner
Email_Campaigner *-- User_newsletter
'users
User_Catalog *-- User
User-->"1"User_TDG

'Event
Event_Catalog *-- Event
Event_Catalog -->"1"Event_Factory
Event_Factory ..>Event
Event -->"1"Event_Agenda
Event -->"1"Event_TDG
Event -->"1"Event_Detail
Event -->"1..*"Event_Content
Email_Campaigner *-- Participant_Feedback
Email_Campaigner -->"1"Feedback_Form

'Engagement and Networking
Event_Catalog -->"1"Filtering_Controller
Filtering_Controller -->"1"EventFilter
EventFilter <|.. BaseFilter
EventFilter <|.. EventFilterDecorator
EventFilterDecorator <|-- Keyword_EventFilterDecorator
EventFilterDecorator <|-- Category_EventFilterDecorator
EventFilterDecorator <|-- EventType_EventFilterDecorator
EventFilterDecorator <|-- Date_EventFilterDecorator

'attendees and events' 
Event_Attendee-->"1"User
Event_Attendee-->"1"Event
User_Catalog"1"-->"1"Attendee_Catalog
Attendee_Catalog *-- Event_Attendee
Attendee_Catalog *-- Handler
Handler <|-- EmailTicketHandler
Handler <|-- RegistrationHandler 
EmailTicketHandler --> Mailgun_Service
Attendee_Catalog -->"1"Attendee_TDG 
Event -->"1"Engagement_Manager
Engagement_Manager -->Chatroom
Engagement_Manager -->Review_Catalog
Review_Catalog *-- Review_Answer
Review_Catalog -->"1"Review_Form
'Ressource management
Main_Controller -->FileManager
FileManager -->"1"DatabaseController
Event -->"1"Promotional_Content
'reporting
Event -->"1..*"Report
'payment management
Main_Controller -->PaymentController
PaymentController -->"1..*"Payment
@enduml
